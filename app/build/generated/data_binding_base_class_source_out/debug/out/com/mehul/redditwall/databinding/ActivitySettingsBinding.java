// Generated by view binder compiler. Do not edit!
package com.mehul.redditwall.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.ScrollView;
import android.widget.SeekBar;
import android.widget.Switch;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import com.mehul.redditwall.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivitySettingsBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final LinearLayout buttons;

  @NonNull
  public final TextView changeIntervalTitle;

  @NonNull
  public final Switch darkSwitch;

  @NonNull
  public final EditText defaultEdit;

  @NonNull
  public final TextView defaultLoad;

  @NonNull
  public final Switch downloadOrigin;

  @NonNull
  public final Switch gifSwitch;

  @NonNull
  public final EditText heightEdit;

  @NonNull
  public final TextView intervalCount;

  @NonNull
  public final SeekBar intervalSeek;

  @NonNull
  public final TextView prefResTitle;

  @NonNull
  public final Switch previewRes;

  @NonNull
  public final TextView randomLocation;

  @NonNull
  public final Button randomLocationButton;

  @NonNull
  public final LinearLayout randomSeekSection;

  @NonNull
  public final Switch randomSwitch;

  @NonNull
  public final LinearLayout refreshLocationSetting;

  @NonNull
  public final LinearLayout resSetting;

  @NonNull
  public final ScrollView scroll;

  @NonNull
  public final EditText widthEdit;

  private ActivitySettingsBinding(@NonNull RelativeLayout rootView, @NonNull LinearLayout buttons,
      @NonNull TextView changeIntervalTitle, @NonNull Switch darkSwitch,
      @NonNull EditText defaultEdit, @NonNull TextView defaultLoad, @NonNull Switch downloadOrigin,
      @NonNull Switch gifSwitch, @NonNull EditText heightEdit, @NonNull TextView intervalCount,
      @NonNull SeekBar intervalSeek, @NonNull TextView prefResTitle, @NonNull Switch previewRes,
      @NonNull TextView randomLocation, @NonNull Button randomLocationButton,
      @NonNull LinearLayout randomSeekSection, @NonNull Switch randomSwitch,
      @NonNull LinearLayout refreshLocationSetting, @NonNull LinearLayout resSetting,
      @NonNull ScrollView scroll, @NonNull EditText widthEdit) {
    this.rootView = rootView;
    this.buttons = buttons;
    this.changeIntervalTitle = changeIntervalTitle;
    this.darkSwitch = darkSwitch;
    this.defaultEdit = defaultEdit;
    this.defaultLoad = defaultLoad;
    this.downloadOrigin = downloadOrigin;
    this.gifSwitch = gifSwitch;
    this.heightEdit = heightEdit;
    this.intervalCount = intervalCount;
    this.intervalSeek = intervalSeek;
    this.prefResTitle = prefResTitle;
    this.previewRes = previewRes;
    this.randomLocation = randomLocation;
    this.randomLocationButton = randomLocationButton;
    this.randomSeekSection = randomSeekSection;
    this.randomSwitch = randomSwitch;
    this.refreshLocationSetting = refreshLocationSetting;
    this.resSetting = resSetting;
    this.scroll = scroll;
    this.widthEdit = widthEdit;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivitySettingsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivitySettingsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_settings, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivitySettingsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.buttons;
      LinearLayout buttons = rootView.findViewById(id);
      if (buttons == null) {
        break missingId;
      }

      id = R.id.changeIntervalTitle;
      TextView changeIntervalTitle = rootView.findViewById(id);
      if (changeIntervalTitle == null) {
        break missingId;
      }

      id = R.id.darkSwitch;
      Switch darkSwitch = rootView.findViewById(id);
      if (darkSwitch == null) {
        break missingId;
      }

      id = R.id.defaultEdit;
      EditText defaultEdit = rootView.findViewById(id);
      if (defaultEdit == null) {
        break missingId;
      }

      id = R.id.defaultLoad;
      TextView defaultLoad = rootView.findViewById(id);
      if (defaultLoad == null) {
        break missingId;
      }

      id = R.id.downloadOrigin;
      Switch downloadOrigin = rootView.findViewById(id);
      if (downloadOrigin == null) {
        break missingId;
      }

      id = R.id.gifSwitch;
      Switch gifSwitch = rootView.findViewById(id);
      if (gifSwitch == null) {
        break missingId;
      }

      id = R.id.heightEdit;
      EditText heightEdit = rootView.findViewById(id);
      if (heightEdit == null) {
        break missingId;
      }

      id = R.id.intervalCount;
      TextView intervalCount = rootView.findViewById(id);
      if (intervalCount == null) {
        break missingId;
      }

      id = R.id.intervalSeek;
      SeekBar intervalSeek = rootView.findViewById(id);
      if (intervalSeek == null) {
        break missingId;
      }

      id = R.id.prefResTitle;
      TextView prefResTitle = rootView.findViewById(id);
      if (prefResTitle == null) {
        break missingId;
      }

      id = R.id.previewRes;
      Switch previewRes = rootView.findViewById(id);
      if (previewRes == null) {
        break missingId;
      }

      id = R.id.randomLocation;
      TextView randomLocation = rootView.findViewById(id);
      if (randomLocation == null) {
        break missingId;
      }

      id = R.id.randomLocationButton;
      Button randomLocationButton = rootView.findViewById(id);
      if (randomLocationButton == null) {
        break missingId;
      }

      id = R.id.randomSeekSection;
      LinearLayout randomSeekSection = rootView.findViewById(id);
      if (randomSeekSection == null) {
        break missingId;
      }

      id = R.id.randomSwitch;
      Switch randomSwitch = rootView.findViewById(id);
      if (randomSwitch == null) {
        break missingId;
      }

      id = R.id.refreshLocationSetting;
      LinearLayout refreshLocationSetting = rootView.findViewById(id);
      if (refreshLocationSetting == null) {
        break missingId;
      }

      id = R.id.resSetting;
      LinearLayout resSetting = rootView.findViewById(id);
      if (resSetting == null) {
        break missingId;
      }

      id = R.id.scroll;
      ScrollView scroll = rootView.findViewById(id);
      if (scroll == null) {
        break missingId;
      }

      id = R.id.widthEdit;
      EditText widthEdit = rootView.findViewById(id);
      if (widthEdit == null) {
        break missingId;
      }

      return new ActivitySettingsBinding((RelativeLayout) rootView, buttons, changeIntervalTitle,
          darkSwitch, defaultEdit, defaultLoad, downloadOrigin, gifSwitch, heightEdit,
          intervalCount, intervalSeek, prefResTitle, previewRes, randomLocation,
          randomLocationButton, randomSeekSection, randomSwitch, refreshLocationSetting, resSetting,
          scroll, widthEdit);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
